{
	"language": "typescript",
	"framework": "svelte",
	"context": [
		"https://svelte-llm.khromov.se/sveltekit,svelte",
		"https://tailwindcss.com/docs",
		"https://svelte.dev/docs",
		"https://www.typescriptlang.org/docs/"
	],
	"api": {
		"svelte": {
			"docs": "https://svelte.dev/content.json",
			"refresh": "daily"
		},
		"typescript": {
			"strict": true
		}
	},
	"includePatterns": [
		"src/**/*.{ts,js,svelte}",
		"*.config.{ts,js}"
	],
	"excludePatterns": [
		"node_modules/**",
		".svelte-kit/**",
		"build/**"
	],
	"rules": {
		"svelte5_events": {
			"pattern": "on:(click|keydown|input|change|submit)",
			"message": "Use 'onclick', 'onkeydown', etc. in Svelte 5 instead of 'on:' event syntax",
			"replacement": {
				"on:click": "onclick",
				"on:keydown": "onkeydown",
				"on:input": "oninput",
				"on:change": "onchange",
				"on:submit": "onsubmit"
			}
		},
		"svelte5_reactivity": {
			"pattern": "\\$:",
			"message": "Use '$derived' or '$effect' in Svelte 5 instead of '$:' reactive statements"
		},
		"bun_sqlite_import": {
			"pattern": "bun:sqlite3",
			"message": "Use 'bun:sqlite' for Bun's SQLite package",
			"replacement": "bun:sqlite"
		},
		"sveltekit_request_event": {
			"pattern": "({ params })",
			"message": "Add RequestEvent type for SvelteKit endpoint parameters",
			"replacement": "({ params }: RequestEvent)"
		},
		"sveltekit_imports_order": {
			"pattern": "import.*from.*@sveltejs/kit.*\n.*import.*from.*\\$lib",
			"message": "Import $lib modules before @sveltejs/kit modules"
		},
		"meaningful_comments_only": {
            "description": "This rule guides the AI to write comments that provide genuine value, avoiding redundancy and focusing on clarity for complex or non-obvious code sections. It discourages comments that merely restate the code, track version history (which Git handles), or explain trivial constructs.",
            "prompt": "When adding or modifying code, follow these commenting guidelines:\n\n1.  **Prioritize Code Clarity:** Strive to write self-documenting code first. Comments should supplement clear code, not compensate for unclear code.\n2.  **Avoid Redundant Comments:**\n    *   **Do not** add comments that simply restate what the code does in natural language (e.g., `// Initialize variable x to 0` for `let x = 0;`).\n    *   **Do not** add comments to track changes, additions, or refactoring (e.g., `// Added function foo`, `// Refactored this loop`). Use version control (Git) for history.\n    *   **Do not** add comments explaining basic language syntax or standard library functions unless the usage is particularly complex or non-standard.\n    *   **Do not** add comments that only state the file path (like `// workers/cloud-availability/src/index.ts`).\n    *   **Avoid** purely decorative comments like `// --- Section Header ---` unless they significantly improve readability in very long files.\n3.  **Focus on Valuable Comments:** Add comments when they provide necessary context or explanation that isn't obvious from the code itself:\n    *   **Explain the 'Why':** Comment on the reasoning behind specific design decisions, algorithms, or workarounds, especially if they are non-obvious or complex. Why was this approach chosen over alternatives?\n    *   **Clarify Complex Logic:** Add comments to explain intricate algorithms, business rules, or state machine transitions.\n    *   **Provide Context:** Explain dependencies on external systems, assumptions made, or potential caveats.\n    *   **Document Public APIs/Interfaces:** Add clear documentation comments (e.g., JSDoc, TSDoc) for exported functions, classes, and types explaining their purpose, parameters, and return values.\n    *   **Mark TODOs/FIXMEs:** Use standard markers like `// TODO:`, `// FIXME:`, `// HACK:`, or `// NOTE:` to highlight areas needing future attention, known issues, or important considerations, along with a brief explanation.\n4.  **Maintain Comments:** When modifying code, ensure existing comments remain accurate and relevant. Remove or update comments that no longer apply.\n5.  **Be Concise:** Write clear, concise comments. Avoid long narratives where a brief explanation suffices.\n\n**Example Evaluation:**\n\n*   `// Loop through users` (Bad - explains trivial code)\n*   `// Added user processing logic` (Bad - version tracking)\n*   `// HACK: Workaround for upstream API bug XYZ-123. Remove when fixed.` (Good - explains 'why' and context)\n*   `// Using a Set here for O(1) lookups during reconciliation` (Good - explains 'why' for performance)\n*   `// TODO: Refactor this to use the new service class` (Good - actionable marker)\n*   `// workers/cloud-availability/src/index.ts` (Bad - redundant file path)\n*   `// Sort for consistency` (Marginal - could be okay if the reason for needing consistency isn't obvious, but often implied)"
        }
	}
}
